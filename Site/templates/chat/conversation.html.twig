<!DOCTYPE html>
<html lang="fr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Chat - Trajet #{{ trajetId }} - AlloParents</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <script>
        tailwind.config = {
            theme: {
                extend: {
                    animation: {
                        'fade-in': 'fadeIn 0.6s ease-out',
                        'slide-up': 'slideUp 0.6s ease-out',
                        'slide-in-left': 'slideInLeft 0.8s ease-out',
                        'slide-in-right': 'slideInRight 0.8s ease-out',
                        'pulse-glow': 'pulseGlow 3s ease-in-out infinite',
                        'bounce-subtle': 'bounceSubtle 2s ease-in-out infinite',
                        'scale-in': 'scaleIn 0.4s ease-out',
                        'wiggle': 'wiggle 0.5s ease-in-out',
                        'message-appear': 'messageAppear 0.4s ease-out',
                        'typing': 'typing 1.5s ease-in-out infinite',
                    },
                    keyframes: {
                        fadeIn: {
                            '0%': { opacity: '0', transform: 'scale(0.95)' },
                            '100%': { opacity: '1', transform: 'scale(1)' }
                        },
                        slideUp: {
                            '0%': { transform: 'translateY(30px)', opacity: '0' },
                            '100%': { transform: 'translateY(0)', opacity: '1' }
                        },
                        slideInLeft: {
                            '0%': { transform: 'translateX(-30px)', opacity: '0' },
                            '100%': { transform: 'translateX(0)', opacity: '1' }
                        },
                        slideInRight: {
                            '0%': { transform: 'translateX(30px)', opacity: '0' },
                            '100%': { transform: 'translateX(0)', opacity: '1' }
                        },
                        pulseGlow: {
                            '0%, 100%': { boxShadow: '0 0 20px rgba(255, 255, 255, 0.1)' },
                            '50%': { boxShadow: '0 0 40px rgba(255, 255, 255, 0.2)' }
                        },
                        bounceSubtle: {
                            '0%, 100%': { transform: 'translateY(0)' },
                            '50%': { transform: 'translateY(-5px)' }
                        },
                        scaleIn: {
                            '0%': { transform: 'scale(0.9)', opacity: '0' },
                            '100%': { transform: 'scale(1)', opacity: '1' }
                        },
                        wiggle: {
                            '0%, 100%': { transform: 'rotate(0deg)' },
                            '25%': { transform: 'rotate(-1deg)' },
                            '75%': { transform: 'rotate(1deg)' }
                        },
                        messageAppear: {
                            '0%': { transform: 'translateY(20px) scale(0.9)', opacity: '0' },
                            '100%': { transform: 'translateY(0) scale(1)', opacity: '1' }
                        },
                        typing: {
                            '0%, 100%': { transform: 'scale(1)' },
                            '50%': { transform: 'scale(1.2)' }
                        }
                    }
                }
            }
        }
    </script>
    <style>
        .gradient-bg {
            background: linear-gradient(135deg,
                #ffffff 0%,
                #f8fafc 25%,
                #f1f5f9 50%,
                #e2e8f0 75%,
                #cbd5e1 100%
            );
        }
        
        .glass-card {
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(20px);
            border: 1px solid rgba(0, 0, 0, 0.08);
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.08), 0 4px 16px rgba(0, 0, 0, 0.04);
        }
        
        .glass-input {
            background: rgba(255, 255, 255, 0.9);
            backdrop-filter: blur(10px);
            border: 1px solid rgba(0, 0, 0, 0.1);
        }
        
        .glass-input:focus {
            background: rgba(255, 255, 255, 1);
            border-color: rgba(59, 130, 246, 0.5);
            box-shadow: 0 0 30px rgba(59, 130, 246, 0.1);
        }
        
        .btn-send {
            background: linear-gradient(45deg, #3b82f6, #2563eb, #1d4ed8);
            transition: all 0.3s ease;
        }
        
        .btn-send:hover {
            background: linear-gradient(45deg, #2563eb, #1d4ed8, #1e40af);
            transform: translateY(-2px);
        }

        .message-mine {
            background: linear-gradient(135deg, #3b82f6, #2563eb);
            margin-left: auto;
        }

        .message-other {
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(10px);
            border: 1px solid rgba(0, 0, 0, 0.08);
            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.05);
        }

        .chat-container {
            height: calc(100vh - 200px);
            max-height: 600px;
        }

        .messages-area {
            background: linear-gradient(180deg, 
                rgba(248, 250, 252, 0.8) 0%, 
                rgba(241, 245, 249, 0.6) 50%, 
                rgba(226, 232, 240, 0.8) 100%
            );
        }
        
        .floating-orbs::before,
        .floating-orbs::after {
            content: '';
            position: absolute;
            border-radius: 50%;
            background: radial-gradient(circle, rgba(59, 130, 246, 0.1) 0%, transparent 70%);
            pointer-events: none;
        }
        
        .floating-orbs::before {
            width: 400px;
            height: 400px;
            top: -200px;
            right: -200px;
            animation: float 15s ease-in-out infinite;
        }
        
        .floating-orbs::after {
            width: 300px;
            height: 300px;
            bottom: -150px;
            left: -150px;
            animation: float 10s ease-in-out infinite reverse;
        }

        @keyframes float {
            0%, 100% { transform: rotate(0deg) translate(-20px) rotate(0deg); }
            50% { transform: rotate(180deg) translate(-20px) rotate(-180deg); }
        }

        .text-shadow {
            text-shadow: 0 2px 20px rgba(0,0,0,0.1);
        }

        /* Scrollbar personnalisée */
        .custom-scrollbar::-webkit-scrollbar {
            width: 8px;
        }

        .custom-scrollbar::-webkit-scrollbar-track {
            background: rgba(0, 0, 0, 0.05);
            border-radius: 4px;
        }

        .custom-scrollbar::-webkit-scrollbar-thumb {
            background: linear-gradient(45deg, #3b82f6, #2563eb);
            border-radius: 4px;
        }

        .custom-scrollbar::-webkit-scrollbar-thumb:hover {
            background: linear-gradient(45deg, #2563eb, #1d4ed8);
        }

        .message-bubble {
            max-width: 75%;
            word-wrap: break-word;
        }

        .typing-indicator {
            display: none;
        }

        .typing-indicator.show {
            display: block;
        }

        .typing-dots span {
            animation: typing 1.5s ease-in-out infinite;
        }

        .typing-dots span:nth-child(2) {
            animation-delay: 0.2s;
        }

        .typing-dots span:nth-child(3) {
            animation-delay: 0.4s;
        }
    </style>
</head>

<body class="gradient-bg min-h-screen">
    <!-- Background Effects -->
    <div class="floating-orbs fixed inset-0 pointer-events-none"></div>
    
    {% include 'partials/_top_navigation.html.twig' with {'pageTitle': 'Trajet #' ~ trajetId} %}

    <!-- Main Content -->
    <main class="pt-24 px-4 pb-4">
        
        <!-- Flash Messages -->
        {% if error %}
            <div class="mb-4 p-4 rounded-2xl bg-red-500/10 border border-red-500/20 backdrop-blur-sm animate-scale-in">
                <div class="flex items-start">
                    <svg class="w-5 h-5 text-red-400 mr-3 mt-0.5 flex-shrink-0" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"/>
                    </svg>
                    <p class="text-red-700 text-sm">{{ error|raw }}</p>
                </div>
            </div>
        {% endif %}

        {% if success %}
            <div class="mb-4 p-4 rounded-2xl bg-emerald-500/10 border border-emerald-500/20 backdrop-blur-sm animate-scale-in">
                <div class="flex items-start">
                    <svg class="w-5 h-5 text-emerald-400 mr-3 mt-0.5 flex-shrink-0" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"/>
                    </svg>
                    <p class="text-emerald-700 text-sm">{{ success }}</p>
                </div>
            </div>
        {% endif %}

        <!-- Informations du trajet -->
        {% if trajet %}
            <div class="mb-4 glass-card rounded-2xl p-4 animate-fade-in">
                <div class="flex items-center space-x-4">
                    <div class="w-10 h-10 bg-gradient-to-r from-blue-500 to-cyan-500 rounded-full flex items-center justify-center">
                        <svg class="w-5 h-5 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 15l-6-6-6 6"/>
                        </svg>
                    </div>
                    <div class="flex-1">
                        <h3 class="text-gray-800 font-medium">{{ trajet.pointDepart }} → {% if trajet.ecole is defined and trajet.ecole.nom is defined %}{{ trajet.ecole.nom }} - {{ trajet.ecole.ville }}{% else %}École de destination{% endif %}</h3>
                        <p class="text-gray-600 text-sm">{{ trajet.dateDepart|date('d/m/Y') }} à {{ trajet.heureDepart }}</p>
                    </div>
                    <div class="text-right">
                        <div class="text-blue-600 text-sm font-medium">{{ trajet.pointsCout ?? 5 }} points</div>
                    </div>
                </div>
                
                                        <!-- Bouton de réservation -->
                        {% if trajet.conducteurId != app.user.id %}
                            {% if not userHasReserved %}
                                <div class="mt-4 pt-4 border-t border-gray-200">
                            <div class="flex items-center justify-between">
                                <div class="flex-1">
                                    <p class="text-gray-600 text-sm">Vous n'avez pas encore réservé ce trajet</p>
                                </div>
                                <a href="{{ path('trajet_rechercher') }}?ecoleId={{ trajet.ecoleArriveeId }}&date={{ trajet.dateDepart }}" 
                                   class="bg-gradient-to-r from-green-600 to-emerald-500 hover:from-green-700 hover:to-emerald-600 text-white font-medium py-2 px-4 rounded-xl transition-all duration-300 flex items-center space-x-2 transform hover:scale-105">
                                    <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"/>
                                    </svg>
                                    <span>Réserver ce trajet</span>
                                </a>
                            </div>
                        </div>
                                                {% else %}
                                <div class="mt-4 pt-4 border-t border-gray-200">
                            <div class="flex items-center justify-center">
                                <div class="flex items-center space-x-2 text-green-600">
                                    <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"/>
                                    </svg>
                                    <span class="text-sm font-medium">Trajet déjà réservé</span>
                                </div>
                            </div>
                        </div>
                    {% endif %}
                {% endif %}
            </div>
        {% endif %}

        <!-- Chat Container -->
        <div class="glass-card rounded-3xl chat-container flex flex-col animate-fade-in">
            
            <!-- Messages Area -->
            <div class="flex-1 p-4 messages-area custom-scrollbar overflow-y-auto" id="messages-container">
                {% if messages is empty %}
                    <div class="flex flex-col items-center justify-center h-full text-center">
                        <svg class="w-16 h-16 text-blue-600 mb-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 12h.01M12 12h.01M16 12h.01M21 12c0 4.418-4.03 8-9 8a9.863 9.863 0 01-4.255-.949L3 20l1.395-3.72C3.512 15.042 3 13.574 3 12c0-4.418 4.03-8 9-8s9 3.582 9 8z"/>
                        </svg>
                        <h3 class="text-xl font-bold text-gray-800 mb-2">Aucun message pour le moment</h3>
                        <p class="text-gray-600">Commencez la conversation en envoyant votre premier message !</p>
                    </div>
                {% else %}
                    <div class="space-y-4" id="messages-list">
                        {% for message in messages %}
                            <div class="flex {% if message.expediteurId == app.user.id %}justify-end{% else %}justify-start{% endif %}">
                                <div class="message-bubble {% if message.expediteurId == app.user.id %}message-mine{% else %}message-other{% endif %} rounded-2xl px-4 py-3">
                                    <p class="{% if message.expediteurId == app.user.id %}text-white{% else %}text-gray-800{% endif %} text-sm mb-1">{{ message.contenu }}</p>
                                    <div class="flex items-center justify-between text-xs {% if message.expediteurId == app.user.id %}text-blue-100{% else %}text-gray-500{% endif %}">
                                        <span>{{ message.dateEnvoi|date('H:i') }}</span>
                                        {% if message.expediteurId == app.user.id %}
                                            <div class="ml-2 flex items-center space-x-1">
                                                {% if message.lu %}
                                                    <svg class="w-3 h-3 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"/>
                                                    </svg>
                                                    <svg class="w-3 h-3 text-green-600 -ml-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"/>
                                                    </svg>
                                                {% else %}
                                                    <svg class="w-3 h-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"/>
                                                    </svg>
                                                {% endif %}
                                            </div>
                                        {% endif %}
                                    </div>
                                </div>
                            </div>
                        {% endfor %}
                    </div>
                {% endif %}

                <!-- Indicateur de frappe -->
                <div class="typing-indicator mt-4">
                    <div class="flex justify-start">
                        <div class="message-other rounded-2xl px-4 py-3 message-bubble">
                            <div class="typing-dots flex space-x-1">
                                <span class="w-2 h-2 bg-gray-400 rounded-full"></span>
                                <span class="w-2 h-2 bg-gray-400 rounded-full"></span>
                                <span class="w-2 h-2 bg-gray-400 rounded-full"></span>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Message Input Area -->
            <div class="border-t border-gray-200 p-4">
                <form method="post" class="flex space-x-3" id="message-form">
                    <div class="flex-1">
                        <input 
                            type="text" 
                            name="contenu" 
                            placeholder="Tapez votre message..." 
                            class="w-full glass-input rounded-2xl px-4 py-3 text-gray-800 placeholder-gray-500 focus:outline-none transition-all duration-300"
                            required
                            id="message-input"
                            autocomplete="off"
                        >
                    </div>
                    <button 
                        type="submit" 
                        class="btn-send text-white font-medium px-6 py-3 rounded-2xl transition-all duration-300 flex items-center justify-center transform hover:scale-105 focus:outline-none focus:ring-2 focus:ring-white/20 shadow-lg hover:shadow-xl"
                        id="send-button"
                    >
                        <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 19l9 2-9-18-9 18 9-2zm0 0v-8"/>
                        </svg>
                    </button>
                </form>
            </div>
        </div>

        <!-- Actions rapides -->
        <div class="mt-4 flex space-x-3">
            <button class="glass-input text-gray-600 text-sm px-4 py-2 rounded-xl hover:bg-gray-100 transition-all duration-300 quick-message" data-message="Merci pour le trajet !">
                👍 Merci
            </button>
            <button class="glass-input text-gray-600 text-sm px-4 py-2 rounded-xl hover:bg-gray-100 transition-all duration-300 quick-message" data-message="Je serai à l'heure !">
                ⏰ À l'heure
            </button>
            <button class="glass-input text-gray-600 text-sm px-4 py-2 rounded-xl hover:bg-gray-100 transition-all duration-300 quick-message" data-message="Excellent trajet !">
                ⭐ Excellent
            </button>
        </div>
    </main>

    <!-- JavaScript for chat functionality -->
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const messagesContainer = document.getElementById('messages-container');
            const messageInput = document.getElementById('message-input');
            const messageForm = document.getElementById('message-form');
            const sendButton = document.getElementById('send-button');
            const typingIndicator = document.querySelector('.typing-indicator');
            const quickMessages = document.querySelectorAll('.quick-message');
            
            let isTyping = false;
            let typingTimeout;

            // Parallax effect for floating orbs
            document.addEventListener('mousemove', (e) => {
                const x = e.clientX / window.innerWidth;
                const y = e.clientY / window.innerHeight;
                
                const orbs = document.querySelector('.floating-orbs');
                if (orbs) {
                    orbs.style.transform = `translate(${x * 8}px, ${y * 8}px)`;
                }
            });

            // Scroll vers le bas pour voir les nouveaux messages
            function scrollToBottom() {
                messagesContainer.scrollTop = messagesContainer.scrollHeight;
            }
            
            // Scroll au chargement de la page
            setTimeout(scrollToBottom, 100);

            // Indicateur de frappe
            messageInput.addEventListener('input', function() {
                if (!isTyping && this.value.length > 0) {
                    isTyping = true;
                    // Ici on pourrait envoyer une notification de frappe via AJAX
                }
                
                clearTimeout(typingTimeout);
                typingTimeout = setTimeout(() => {
                    isTyping = false;
                    // Ici on pourrait arrêter la notification de frappe
                }, 1000);
            });

            // Messages rapides
            quickMessages.forEach(button => {
                button.addEventListener('click', function() {
                    messageInput.value = this.dataset.message;
                    messageInput.focus();
                });
            });

            // Envoi du formulaire
            messageForm.addEventListener('submit', function(e) {
                e.preventDefault(); // Empêcher la soumission normale du formulaire
                
                const message = messageInput.value.trim();
                if (!message) return;
                
                // Désactiver le bouton pendant l'envoi
                sendButton.disabled = true;
                sendButton.innerHTML = '<svg class="w-5 h-5 animate-spin" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"/></svg>';
                
                // Vider le champ immédiatement
                messageInput.value = '';
                
                // Envoyer le message via fetch
                const formData = new FormData();
                formData.append('contenu', message);
                
                fetch(window.location.href, {
                    method: 'POST',
                    body: formData
                })
                .then(response => {
                    if (response.ok) {
                        // Le message a été envoyé avec succès, recharger la page pour voir le message
                        window.location.reload();
                    } else {
                        throw new Error('Erreur lors de l\'envoi');
                    }
                })
                .catch(error => {
                    console.error('Erreur:', error);
                    alert('Erreur lors de l\'envoi du message. Veuillez réessayer.');
                    messageInput.value = message; // Remettre le message dans le champ
                })
                .finally(() => {
                    // Réactiver le bouton
                    sendButton.disabled = false;
                    sendButton.innerHTML = '<svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 19l9 2-9-18-9 18 9-2zm0 0v-8"/></svg>';
                });
            });

            // Fonction pour ajouter un message au chat
            function addMessageToChat(content, isMine, timestamp) {
                const messagesList = document.getElementById('messages-list');
                if (!messagesList) return;

                const messageDiv = document.createElement('div');
                messageDiv.className = `flex ${isMine ? 'justify-end' : 'justify-start'}`;
                
                const now = new Date();
                const timeString = now.getHours().toString().padStart(2, '0') + ':' + now.getMinutes().toString().padStart(2, '0');
                
                messageDiv.innerHTML = `
                    <div class="message-bubble ${isMine ? 'message-mine' : 'message-other'} rounded-2xl px-4 py-3">
                        <p class="text-white text-sm mb-1">${content}</p>
                        <div class="flex items-center justify-between text-xs ${isMine ? 'text-blue-200' : 'text-gray-400'}">
                            <span>${timeString}</span>
                            ${isMine ? `
                                <div class="ml-2 flex items-center space-x-1">
                                    <svg class="w-3 h-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"/>
                                    </svg>
                                </div>
                            ` : ''}
                        </div>
                    </div>
                `;
                
                messagesList.appendChild(messageDiv);
            }

            // Auto-refresh toutes les 10 secondes (au lieu de 5 pour être moins intrusif)
            setInterval(function() {
                // Sauvegarder la position de scroll
                const scrollPosition = messagesContainer.scrollTop;
                const scrollHeight = messagesContainer.scrollHeight;
                const clientHeight = messagesContainer.clientHeight;
                const isAtBottom = scrollPosition >= scrollHeight - clientHeight - 10;
                
                // Recharger seulement si on n'est pas en train de taper
                if (!isTyping && !messageInput.value.trim()) {
                    fetch(window.location.href)
                        .then(response => response.text())
                        .then(html => {
                            const parser = new DOMParser();
                            const doc = parser.parseFromString(html, 'text/html');
                            const newMessagesList = doc.getElementById('messages-list');
                            
                            if (newMessagesList && messagesList) {
                                const currentMessages = messagesList.innerHTML;
                                const newMessages = newMessagesList.innerHTML;
                                
                                if (currentMessages !== newMessages) {
                                    messagesList.innerHTML = newMessages;
                                    if (isAtBottom) {
                                        scrollToBottom();
                                    }
                                }
                            }
                        })
                        .catch(error => console.log('Erreur de rechargement:', error));
                }
            }, 10000);

            // Raccourci clavier Enter pour envoyer
            messageInput.addEventListener('keypress', function(e) {
                if (e.key === 'Enter' && !e.shiftKey) {
                    e.preventDefault();
                    messageForm.dispatchEvent(new Event('submit'));
                }
            });
        });
    </script>
</body>
</html> 