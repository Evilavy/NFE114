<!DOCTYPE html>
<html lang="fr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Mes messages - AlloParents</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <script>
        tailwind.config = {
            theme: {
                extend: {
                    animation: {
                        'fade-in': 'fadeIn 0.6s ease-out',
                        'slide-up': 'slideUp 0.6s ease-out',
                        'slide-in-left': 'slideInLeft 0.8s ease-out',
                        'slide-in-right': 'slideInRight 0.8s ease-out',
                        'pulse-glow': 'pulseGlow 3s ease-in-out infinite',
                        'bounce-subtle': 'bounceSubtle 2s ease-in-out infinite',
                        'scale-in': 'scaleIn 0.4s ease-out',
                        'wiggle': 'wiggle 0.5s ease-in-out',
                    },
                    keyframes: {
                        fadeIn: {
                            '0%': { opacity: '0', transform: 'scale(0.95)' },
                            '100%': { opacity: '1', transform: 'scale(1)' }
                        },
                        slideUp: {
                            '0%': { transform: 'translateY(30px)', opacity: '0' },
                            '100%': { transform: 'translateY(0)', opacity: '1' }
                        },
                        slideInLeft: {
                            '0%': { transform: 'translateX(-30px)', opacity: '0' },
                            '100%': { transform: 'translateX(0)', opacity: '1' }
                        },
                        slideInRight: {
                            '0%': { transform: 'translateX(30px)', opacity: '0' },
                            '100%': { transform: 'translateX(0)', opacity: '1' }
                        },
                        pulseGlow: {
                            '0%, 100%': { boxShadow: '0 0 20px rgba(255, 255, 255, 0.1)' },
                            '50%': { boxShadow: '0 0 40px rgba(255, 255, 255, 0.2)' }
                        },
                        bounceSubtle: {
                            '0%, 100%': { transform: 'translateY(0)' },
                            '50%': { transform: 'translateY(-5px)' }
                        },
                        scaleIn: {
                            '0%': { transform: 'scale(0.9)', opacity: '0' },
                            '100%': { transform: 'scale(1)', opacity: '1' }
                        },
                        wiggle: {
                            '0%, 100%': { transform: 'rotate(0deg)' },
                            '25%': { transform: 'rotate(-1deg)' },
                            '75%': { transform: 'rotate(1deg)' }
                        }
                    }
                }
            }
        }
    </script>
    <style>
        .gradient-bg {
            background: linear-gradient(135deg,
                #ffffff 0%,
                #f8fafc 25%,
                #f1f5f9 50%,
                #e2e8f0 75%,
                #cbd5e1 100%
            );
        }
        
        .glass-card {
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(20px);
            border: 1px solid rgba(0, 0, 0, 0.08);
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.08), 0 4px 16px rgba(0, 0, 0, 0.04);
        }
        
        .glass-input {
            background: rgba(255, 255, 255, 0.9);
            backdrop-filter: blur(10px);
            border: 1px solid rgba(0, 0, 0, 0.1);
        }
        
        .glass-input:focus {
            background: rgba(255, 255, 255, 1);
            border-color: rgba(59, 130, 246, 0.5);
            box-shadow: 0 0 30px rgba(59, 130, 246, 0.1);
        }
        
        .btn-primary {
            background: linear-gradient(45deg, #3b82f6, #2563eb, #1d4ed8);
            transition: all 0.3s ease;
        }
        
        .btn-primary:hover {
            background: linear-gradient(45deg, #2563eb, #1d4ed8, #1e40af);
            transform: translateY(-2px);
        }
        
        .btn-success {
            background: linear-gradient(45deg, #3b82f6, #2563eb, #1d4ed8);
            transition: all 0.3s ease;
        }
        
        .btn-success:hover {
            background: linear-gradient(45deg, #2563eb, #1d4ed8, #1e40af);
            transform: translateY(-2px);
        }

        .conversation-card {
            transition: all 0.3s ease;
        }

        .conversation-card:hover {
            transform: translateY(-4px);
            box-shadow: 0 20px 40px rgba(0,0,0,0.1);
        }

        .notification-badge {
            background: linear-gradient(45deg, #ef4444, #dc2626);
            animation: pulse-glow 2s ease-in-out infinite;
        }
        
        .floating-orbs::before,
        .floating-orbs::after {
            content: '';
            position: absolute;
            border-radius: 50%;
            background: radial-gradient(circle, rgba(59, 130, 246, 0.1) 0%, transparent 70%);
            pointer-events: none;
        }
        
        .floating-orbs::before {
            width: 400px;
            height: 400px;
            top: -200px;
            right: -200px;
            animation: float 15s ease-in-out infinite;
        }
        
        .floating-orbs::after {
            width: 300px;
            height: 300px;
            bottom: -150px;
            left: -150px;
            animation: float 10s ease-in-out infinite reverse;
        }

        @keyframes float {
            0%, 100% { transform: rotate(0deg) translate(-20px) rotate(0deg); }
            50% { transform: rotate(180deg) translate(-20px) rotate(-180deg); }
        }

        .text-shadow {
            text-shadow: 0 2px 20px rgba(0,0,0,0.1);
        }

        .bottom-nav {
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(20px);
            border: 1px solid rgba(0, 0, 0, 0.08);
            box-shadow: 0 -8px 32px rgba(0, 0, 0, 0.08), 0 -4px 16px rgba(0, 0, 0, 0.04);
        }

        .message-preview {
            background: linear-gradient(90deg, transparent, rgba(59, 130, 246, 0.05), transparent);
        }
    </style>
</head>

<body class="gradient-bg min-h-screen">
    <!-- Background Effects -->
    <div class="floating-orbs fixed inset-0 pointer-events-none"></div>
    
    {% include 'partials/_top_navigation.html.twig' with {'pageTitle': 'Mes messages'} %}

    <!-- Main Content -->
    <main class="pt-24 px-4 pb-24">
        
        <!-- Flash Messages -->
    {% if error %}
            <div class="mb-4 p-4 rounded-2xl bg-red-500/10 border border-red-500/20 backdrop-blur-sm animate-scale-in">
                <div class="flex items-start">
                    <svg class="w-5 h-5 text-red-400 mr-3 mt-0.5 flex-shrink-0" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"/>
                    </svg>
                    <p class="text-red-200 text-sm">{{ error|raw }}</p>
                </div>
        </div>
    {% endif %}

    {% if conversations is empty %}
            <div class="glass-card rounded-3xl p-8 text-center animate-fade-in">
                <svg class="w-16 h-16 text-gray-400 mx-auto mb-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 12h.01M12 12h.01M16 12h.01M21 12c0 4.418-4.03 8-9 8a9.863 9.863 0 01-4.255-.949L3 20l1.395-3.72C3.512 15.042 3 13.574 3 12c0-4.418 4.03-8 9-8s9 3.582 9 8z"/>
                </svg>
                <h3 class="text-xl font-bold text-gray-800 mb-2">Aucun message trouvé</h3>
                <p class="text-gray-600 mb-6">Vous n'avez pas encore de conversations.</p>
                <a href="{{ path('trajet_rechercher') }}" class="btn-primary text-white font-medium px-6 py-3 rounded-2xl transition-all duration-300 inline-flex items-center">
                    <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"/>
                    </svg>
                    Rechercher des trajets pour commencer à discuter
                </a>
        </div>
    {% else %}
            <div class="space-y-3">
            {% for conversation in conversations %}
                    <div class="glass-card rounded-2xl p-4 conversation-card animate-slide-in-left hover:bg-gray-100 transition-all duration-300" style="animation-delay: {{ loop.index0 * 0.1 }}s">
                        <!-- En-tête compact -->
                        <div class="flex items-center justify-between mb-3">
                            <div class="flex items-center space-x-3 flex-1 min-w-0">
                                <div class="flex-1 min-w-0">
                                    <h3 class="text-gray-800 font-semibold text-sm">
                                        {% if conversation.trajet %}
                                            {% set depart = conversation.trajet.pointDepart|default('Départ')|split(',')|first|trim %}
                                            {% set arrivee = conversation.trajet.ecole is defined and conversation.trajet.ecole.nom is defined
                                                ? (conversation.trajet.ecole.nom ~ ' - ' ~ (conversation.trajet.ecole.ville|default('')))|trim
                                                : 'École de destination' %}
                                            {% if depart|length > 15 %}
                                                {% set depart = depart|slice(0, 15) ~ '...' %}
                                            {% endif %}
                                            {% if arrivee|length > 15 %}
                                                {% set arrivee = arrivee|slice(0, 15) ~ '...' %}
                                            {% endif %}
                                            {{ depart }} → {{ arrivee }}
                                        {% else %}
                                            Trajet #{{ conversation.trajetId }}
                                        {% endif %}
                                    </h3>
                                    <p class="text-gray-600 text-xs">
                                        {% if conversation.trajet %}
                                            {{ conversation.trajet.dateDepart|date('d/m/Y') }} à {{ conversation.trajet.heureDepart }}
                                        {% else %}
                                            Utilisateur #{{ conversation.autreUserId }}
                                        {% endif %}
                                    </p>
                                </div>
                            </div>
                            
                            <!-- Badge de nouveaux messages -->
                            {% if conversation.messagesNonLus > 0 %}
                                <div class="notification-badge bg-red-500 text-white text-xs font-bold px-2 py-1 rounded-full flex-shrink-0 ml-2">
                                    {{ conversation.messagesNonLus }}
                                </div>
                            {% endif %}
                        </div>
                        
                        <!-- Dernier message compact -->
                        {% if conversation.dernierMessage %}
                            <div class="mb-3">
                                <div class="flex items-start space-x-2">
                                    <div class="w-6 h-6 bg-gradient-to-r from-gray-600 to-gray-700 rounded-full flex items-center justify-center flex-shrink-0 mt-0.5">
                                        {% if conversation.dernierMessage.expediteurId == app.user.id %}
                                            <svg class="w-3 h-3 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 19l9 2-9-18-9 18 9-2zm0 0v-8"/>
                                            </svg>
                                        {% else %}
                                            <svg class="w-3 h-3 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M20 13V6a2 2 0 00-2-2H6a2 2 0 00-2 2v7m16 0v5a2 2 0 01-2 2H6a2 2 0 01-2-2v-5m16 0h-2.586a1 1 0 00-.707.293l-2.414 2.414a1 1 0 01-.707.293h-3.172a1 1 0 01-.707-.293l-2.414-2.414A1 1 0 006.586 13H4"/>
                                            </svg>
                                        {% endif %}
                                    </div>
                                    <div class="flex-1 min-w-0">
                                        <p class="text-gray-700 text-sm leading-tight">
                                            {{ conversation.dernierMessage.contenu|length > 80 ? conversation.dernierMessage.contenu|slice(0, 80) ~ '...' : conversation.dernierMessage.contenu }}
                                        </p>
                                        <div class="flex items-center space-x-2 mt-1">
                                            <span class="text-gray-500 text-xs">
                                                {{ conversation.dernierMessage.dateEnvoi|date('d/m H:i') }}
                                            </span>
                                            <span class="text-gray-500 text-xs">•</span>
                                            <span class="text-gray-500 text-xs">
                                                {% if conversation.dernierMessage.expediteurId == app.user.id %}
                                                    Vous
                                                {% else %}
                                                    Reçu
                                                {% endif %}
                                            </span>
                                        </div>
                                    </div>
                                </div>
                            {% endif %}
                        
                        <!-- Footer avec stats et action -->
                        <div class="flex items-center justify-between pt-2 border-t border-gray-200">
                            <div class="flex items-center space-x-3 text-gray-500 text-xs">
                                <div class="flex items-center space-x-1">
                                    <svg class="w-3 h-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 8h10M7 12h4m1 8l-4-4H5a2 2 0 01-2-2V6a2 2 0 012-2h14a2 2 0 012 2v8a2 2 0 01-2 2h-3l-4 4z"/>
                                    </svg>
                                    <span>{{ conversation.messages|length }}</span>
                                </div>
                            </div>
                            
                            <a href="{{ path('chat_conversation', {'trajetId': conversation.trajetId, 'destinataireId': conversation.autreUserId}) }}" 
                               onclick="markConversationAsRead({{ conversation.trajetId }}, {{ conversation.autreUserId }}, this)"
                               class="bg-blue-600 hover:bg-blue-700 text-white text-xs font-medium py-2 px-4 rounded-xl transition-all duration-300 flex items-center space-x-1 transform hover:scale-105">
                                <svg class="w-3 h-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 12h.01M12 12h.01M16 12h.01M21 12c0 4.418-4.03 8-9 8a9.863 9.863 0 01-4.255-.949L3 20l1.395-3.72C3.512 15.042 3 13.574 3 12c0-4.418 4.03-8 9-8s9 3.582 9 8z"/>
                                </svg>
                                <span class="hidden sm:inline">Ouvrir</span>
                            </a>
                        </div>
                    </div>
            {% endfor %}
        </div>
        {% endif %}
        
        <!-- Action principale -->
        <div class="mt-8 text-center">
            <a 
                href="{{ path('trajet_rechercher') }}" 
                class="btn-success text-white font-semibold px-8 py-4 rounded-2xl transition-all duration-300 inline-flex items-center transform hover:scale-105 focus:outline-none focus:ring-2 focus:ring-white/20 shadow-lg hover:shadow-xl"
            >
                <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"/>
                </svg>
                Rechercher des trajets
            </a>
        </div>
    </main>

    {% include 'partials/_bottom_navigation.html.twig' %}

    <!-- JavaScript for animations -->
    <script>


        document.addEventListener('DOMContentLoaded', function() {
            // Parallax effect for floating orbs
            document.addEventListener('mousemove', (e) => {
                const x = e.clientX / window.innerWidth;
                const y = e.clientY / window.innerHeight;
                
                const orbs = document.querySelector('.floating-orbs');
                if (orbs) {
                    orbs.style.transform = `translate(${x * 8}px, ${y * 8}px)`;
                }
            });

            // Staggered animations on load
            setTimeout(() => {
                const cards = document.querySelectorAll('.conversation-card');
                cards.forEach((card, index) => {
                    setTimeout(() => {
                        card.style.opacity = '1';
                        card.style.transform = 'translateX(0)';
                    }, index * 200);
                });
            }, 300);
        });

        // Function to mark conversation as read
        window.markConversationAsRead = function(trajetId, autreUserId, linkElement) {
            // Marquer visuellement comme lu immédiatement
            const badge = linkElement.closest('.conversation-card').querySelector('.notification-badge');
            if (badge) {
                badge.style.display = 'none';
            }

            // Appel API pour marquer comme lu côté serveur (non bloquant)
            fetch('/chat/mark-conversation-read/' + trajetId + '/' + autreUserId, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
            }).catch(error => {
                console.log('Erreur lors du marquage comme lu:', error);
                // Ne pas bloquer la navigation même en cas d'erreur
            });

            // Laisser le lien se comporter normalement
            return true;
        };
    </script>
</body>
</html> 