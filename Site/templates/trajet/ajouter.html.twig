<!DOCTYPE html>
<html lang="fr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Créer un trajet - AlloParents</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <script>
        tailwind.config = {
            theme: {
                extend: {
                    animation: {
                        'fade-in': 'fadeIn 0.6s ease-out',
                        'slide-up': 'slideUp 0.6s ease-out',
                        'slide-in-left': 'slideInLeft 0.8s ease-out',
                        'slide-in-right': 'slideInRight 0.8s ease-out',
                        'pulse-glow': 'pulseGlow 3s ease-in-out infinite',
                        'bounce-subtle': 'bounceSubtle 2s ease-in-out infinite',
                        'scale-in': 'scaleIn 0.4s ease-out',
                        'wiggle': 'wiggle 0.5s ease-in-out',
                    },
                    keyframes: {
                        fadeIn: {
                            '0%': { opacity: '0', transform: 'scale(0.95)' },
                            '100%': { opacity: '1', transform: 'scale(1)' }
                        },
                        slideUp: {
                            '0%': { transform: 'translateY(30px)', opacity: '0' },
                            '100%': { transform: 'translateY(0)', opacity: '1' }
                        },
                        slideInLeft: {
                            '0%': { transform: 'translateX(-30px)', opacity: '0' },
                            '100%': { transform: 'translateX(0)', opacity: '1' }
                        },
                        slideInRight: {
                            '0%': { transform: 'translateX(30px)', opacity: '0' },
                            '100%': { transform: 'translateX(0)', opacity: '1' }
                        },
                        pulseGlow: {
                            '0%, 100%': { boxShadow: '0 0 20px rgba(255, 255, 255, 0.1)' },
                            '50%': { boxShadow: '0 0 40px rgba(255, 255, 255, 0.2)' }
                        },
                        bounceSubtle: {
                            '0%, 100%': { transform: 'translateY(0)' },
                            '50%': { transform: 'translateY(-5px)' }
                        },
                        scaleIn: {
                            '0%': { transform: 'scale(0.9)', opacity: '0' },
                            '100%': { transform: 'scale(1)', opacity: '1' }
                        },
                        wiggle: {
                            '0%, 100%': { transform: 'rotate(0deg)' },
                            '25%': { transform: 'rotate(-1deg)' },
                            '75%': { transform: 'rotate(1deg)' }
                        }
                    }
                }
            }
        }
    </script>
    <style>
        .gradient-bg {
            background: linear-gradient(135deg,
                #ffffff 0%,
                #f8fafc 25%,
                #f1f5f9 50%,
                #e2e8f0 75%,
                #cbd5e1 100%
            );
        }
        
        .glass-card {
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(20px);
            border: 1px solid rgba(0, 0, 0, 0.08);
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.08), 0 4px 16px rgba(0, 0, 0, 0.04);
        }
        
        .glass-input {
            background: rgba(255, 255, 255, 0.9);
            backdrop-filter: blur(10px);
            border: 1px solid rgba(0, 0, 0, 0.1);
        }
        
        .glass-input:focus {
            background: rgba(255, 255, 255, 1);
            border-color: rgba(59, 130, 246, 0.5);
            box-shadow: 0 0 30px rgba(59, 130, 246, 0.1);
        }
        
        .glass-input.success {
            border-color: rgba(34, 197, 94, 0.5);
            background: rgba(34, 197, 94, 0.1);
            animation: successPulse 1.5s ease-in-out;
        }

        @keyframes successPulse {
            0% { box-shadow: 0 0 0 3px rgba(34, 197, 94, 0.1); }
            50% { box-shadow: 0 0 0 8px rgba(34, 197, 94, 0.2); }
            100% { box-shadow: 0 0 0 3px rgba(34, 197, 94, 0.1); }
        }
        
        .glass-input.error {
            border-color: rgba(239, 68, 68, 0.5);
            background: rgba(239, 68, 68, 0.1);
        }
        
        .btn-create {
            background: linear-gradient(45deg, #3b82f6, #2563eb, #1d4ed8);
            transition: all 0.3s ease;
        }
        
        .btn-create:hover {
            background: linear-gradient(45deg, #2563eb, #1d4ed8, #1e40af);
            transform: translateY(-2px);
        }
        
        .btn-create:disabled {
            background: linear-gradient(45deg, #9ca3af, #d1d5db);
            transform: none;
            cursor: not-allowed;
        }
        
        .btn-cancel {
            background: linear-gradient(45deg, #f3f4f6, #e5e7eb);
            color: #374151;
            transition: all 0.3s ease;
        }
        
        .btn-cancel:hover {
            background: linear-gradient(45deg, #e5e7eb, #d1d5db);
            transform: translateY(-1px);
        }
        
        .floating-orbs::before,
        .floating-orbs::after {
            content: '';
            position: absolute;
            border-radius: 50%;
            background: radial-gradient(circle, rgba(59, 130, 246, 0.1) 0%, transparent 70%);
            pointer-events: none;
        }
        
        .floating-orbs::before {
            width: 400px;
            height: 400px;
            top: -200px;
            right: -200px;
            animation: float 15s ease-in-out infinite;
        }
        
        .floating-orbs::after {
            width: 300px;
            height: 300px;
            bottom: -150px;
            left: -150px;
            animation: float 10s ease-in-out infinite reverse;
        }

        .text-shadow {
            text-shadow: 0 2px 20px rgba(0,0,0,0.1);
        }

        .suggestions-list {
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(20px);
            border: 1px solid rgba(0, 0, 0, 0.1);
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
        }

        .step-indicator {
            background: linear-gradient(45deg, #3b82f6, #2563eb);
        }

        .step-indicator.active {
            background: linear-gradient(45deg, #1d4ed8, #1e40af);
        }

        .progress-bar {
            background: linear-gradient(90deg, #3b82f6, #2563eb, #1d4ed8);
        }
    </style>
</head>

<body class="gradient-bg min-h-screen">
    <!-- Background Effects -->
    <div class="floating-orbs fixed inset-0 pointer-events-none"></div>
    
    {% include 'partials/_top_navigation.html.twig' with {'pageTitle': 'Créer un trajet'} %}

    <!-- Progress Bar -->
    <div class="fixed top-16 left-0 right-0 z-40">
        <div class="progress-bar h-1 transition-all duration-500" id="progressBar" style="width: 0%"></div>
    </div>

    <!-- Main Content -->
    <main class="pt-24 px-4 pb-24">
        
        <!-- Flash Messages -->
        {% if error %}
            <div class="mb-4 p-4 rounded-2xl bg-red-500/10 border border-red-500/20 backdrop-blur-sm animate-scale-in">
                <div class="flex items-start">
                    <svg class="w-5 h-5 text-red-600 mr-3 mt-0.5 flex-shrink-0" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"/>
                    </svg>
                    <p class="text-red-200 text-sm">{{ error|raw }}</p>
                </div>
            </div>
        {% endif %}

        {% if success %}
            <div class="mb-4 p-4 rounded-2xl bg-emerald-500/10 border border-emerald-500/20 backdrop-blur-sm animate-scale-in">
                <div class="flex items-start">
                    <svg class="w-5 h-5 text-emerald-600 mr-3 mt-0.5 flex-shrink-0" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"/>
                    </svg>
                    <p class="text-emerald-200 text-sm">{{ success }}</p>
                </div>
            </div>
        {% endif %}

        <!-- Warning Messages -->
        {% if voitures is empty %}
            <div class="mb-6 p-4 rounded-2xl bg-amber-500/10 border border-amber-500/20 backdrop-blur-sm animate-scale-in">
                <div class="flex items-start">
                    <svg class="w-5 h-5 text-amber-600 mr-3 mt-0.5 flex-shrink-0" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4.5c-.77-.833-2.694-.833-3.464 0L3.34 16.5c-.77.833.192 2.5 1.732 2.5z"/>
                    </svg>
                    <div>
                        <p class="text-amber-200 text-sm font-medium">Aucune voiture enregistrée</p>
                        <p class="text-amber-300 text-xs mt-1">Vous devez d'abord ajouter une voiture pour créer un trajet.</p>
                        <a href="{{ path('gestion_voitures') }}" class="inline-flex items-center mt-2 text-amber-200 text-xs underline decoration-1 underline-offset-2 hover:decoration-2">
                            <svg class="w-3 h-3 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4"/>
                            </svg>
                            Ajouter une voiture
                        </a>
                    </div>
                </div>
            </div>
        {% endif %}

        {% if enfants is empty %}
            <div class="mb-6 p-4 rounded-2xl bg-amber-500/10 border border-amber-500/20 backdrop-blur-sm animate-scale-in">
                <div class="flex items-start">
                    <svg class="w-5 h-5 text-amber-600 mr-3 mt-0.5 flex-shrink-0" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"/>
                    </svg>
                    <div>
                        <p class="text-amber-200 text-sm font-medium">Aucun enfant enregistré</p>
                        <p class="text-amber-300 text-xs mt-1">Ajoutez au moins un enfant pour préciser qui sera dans votre voiture.</p>
                        <a href="{{ path('gestion_enfants') }}" class="inline-flex items-center mt-2 text-amber-200 text-xs underline decoration-1 underline-offset-2 hover:decoration-2">
                            <svg class="w-3 h-3 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4"/>
                            </svg>
                            Ajouter un enfant
                        </a>
                    </div>
                </div>
            </div>
        {% endif %}

        <!-- Main Form -->
        <form method="post" class="space-y-6 animate-fade-in">
            
            <!-- Step 1: Route -->
            <div class="glass-card rounded-3xl p-6 animate-slide-in-left form-step" data-step="1">
                <div class="flex items-center mb-6">
                    <div class="step-indicator w-8 h-8 rounded-full flex items-center justify-center mr-3 text-white font-bold text-sm">1</div>
                    <h2 class="text-gray-800 font-bold text-lg">Itinéraire</h2>
                </div>

                <div class="space-y-4">
                    <!-- Point de départ -->
                    <div class="space-y-2 relative">
                        <label for="pointDepart" class="block text-sm font-medium text-gray-700">
                            Point de départ
                        </label>
                        <div class="relative">
                                                            <div class="absolute inset-y-0 left-0 pl-4 flex items-center pointer-events-none">
                                    <svg class="w-5 h-5 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z"/>
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 11a3 3 0 11-6 0 3 3 0 016 0z"/>
                                    </svg>
                                </div>
                            <input 
                                type="text" 
                                id="pointDepart" 
                                name="pointDepart" 
                                required
                                class="w-full pl-12 pr-4 py-4 glass-input rounded-2xl text-gray-800 placeholder-gray-500 focus:outline-none transition-all duration-300"
                                placeholder="Tapez votre adresse de départ..."
                                autocomplete="off"
                            >
                            <div id="suggestions" class="absolute z-50 w-full mt-1 suggestions-list rounded-2xl max-h-60 overflow-y-auto hidden shadow-2xl"></div>
                        </div>
                    </div>

                    <!-- École d'arrivée -->
                    <div class="space-y-2">
                        <label for="ecoleArrivee" class="block text-sm font-medium text-gray-700">
                            École de destination
                        </label>
                        <div class="relative">
                                                            <div class="absolute inset-y-0 left-0 pl-4 flex items-center pointer-events-none">
                                    <svg class="w-5 h-5 text-red-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 21V5a2 2 0 00-2-2H7a2 2 0 00-2 2v16m14 0h2m-2 0h-4m-5 0H9m0 0H5m0 0h2M7 7h10M7 11h4m6 0h4M7 15h10"/>
                                    </svg>
                                </div>
                            <select 
                                id="ecoleArrivee" 
                                name="ecoleArrivee" 
                                required
                                class="w-full pl-12 pr-10 py-4 glass-input rounded-2xl text-gray-800 focus:outline-none transition-all duration-300 appearance-none cursor-pointer"
                            >
                                <option value="" class="bg-white text-gray-600">Sélectionnez une école</option>
                                {% for ecole in ecoles %}
                                    <option value="{{ ecole.id }}" class="bg-white text-gray-800">{{ ecole.nom }} - {{ ecole.ville }} ({{ ecole.codePostal }})</option>
                                {% endfor %}
                            </select>
                            <div class="absolute inset-y-0 right-0 pr-4 flex items-center pointer-events-none">
                                <svg class="w-5 h-5 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"/>
                                </svg>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Step 2: Timing -->
            <div class="glass-card rounded-3xl p-6 animate-slide-in-right form-step" data-step="2">
                <div class="flex items-center mb-6">
                    <div class="step-indicator w-8 h-8 rounded-full flex items-center justify-center mr-3 text-white font-bold text-sm">2</div>
                    <h2 class="text-gray-800 font-bold text-lg">Horaires</h2>
                </div>

                <div class="space-y-4">
                    <!-- Date & Heure de départ -->
                    <div class="grid grid-cols-2 gap-4">
                        <div class="space-y-2">
                            <label for="dateDepart" class="block text-sm font-medium text-gray-700">
                                Date de départ
                            </label>
                            <div class="relative">
                                <div class="absolute inset-y-0 left-0 pl-4 flex items-center pointer-events-none">
                                    <svg class="w-5 h-5 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"/>
                                    </svg>
                                </div>
                                <input 
                                    type="date" 
                                    id="dateDepart" 
                                    name="dateDepart" 
                                    required
                                    class="w-full pl-12 pr-4 py-4 glass-input rounded-2xl text-gray-800 focus:outline-none transition-all duration-300"
                                >
                            </div>
                        </div>

                        <div class="space-y-2">
                            <label for="heureDepart" class="block text-sm font-medium text-gray-700">
                                Heure de départ
                            </label>
                            <div class="relative">
                                <div class="absolute inset-y-0 left-0 pl-4 flex items-center pointer-events-none">
                                    <svg class="w-5 h-5 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"/>
                                    </svg>
                                </div>
                                <input 
                                    type="time" 
                                    id="heureDepart" 
                                    name="heureDepart" 
                                    required
                                    class="w-full pl-12 pr-4 py-4 glass-input rounded-2xl text-gray-800 focus:outline-none transition-all duration-300"
                                >
                            </div>
                        </div>
                    </div>

                    <!-- Durée calculée -->
                    <div class="space-y-2" id="dureeContainer" style="display: none;">
                        <label class="block text-sm font-medium text-gray-700">
                            Durée estimée du trajet
                        </label>
                        <div class="relative">
                                                            <div class="absolute inset-y-0 left-0 pl-4 flex items-center pointer-events-none">
                                    <svg class="w-5 h-5 text-amber-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 10V3L4 14h7v7l9-11h-7z"/>
                                    </svg>
                                </div>
                            <div class="w-full pl-12 pr-4 py-4 glass-input rounded-2xl text-gray-800 flex items-center justify-between">
                                <span id="dureeText">Calcul en cours...</span>
                                <button type="button" id="appliquerDuree" class="bg-blue-600 hover:bg-blue-700 text-white text-xs px-3 py-1 rounded-lg transition-all duration-300 hover:scale-105" style="display: none;">
                                    Appliquer
                                </button>
                            </div>
                            <input type="hidden" id="dureeMinutes" name="dureeMinutes" value="">
                            <input type="hidden" id="distanceKm" name="distanceKm" value="">
                        </div>
                        <p class="text-gray-500 text-xs">Calculé automatiquement via OpenStreetMap</p>
                    </div>

                    <!-- Date & Heure d'arrivée -->
                    <div class="grid grid-cols-2 gap-4">
                        <div class="space-y-2">
                            <label for="dateArrivee" class="block text-sm font-medium text-gray-700">
                                Date d'arrivée
                            </label>
                            <div class="relative">
                                <div class="absolute inset-y-0 left-0 pl-4 flex items-center pointer-events-none">
                                    <svg class="w-5 h-5 text-purple-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"/>
                                    </svg>
                                </div>
                                <input 
                                    type="date" 
                                    id="dateArrivee" 
                                    name="dateArrivee" 
                                    readonly
                                    class="w-full pl-12 pr-4 py-4 glass-input rounded-2xl text-gray-800 focus:outline-none transition-all duration-300 cursor-not-allowed opacity-70"
                                >
                            </div>
                            <p class="text-gray-500 text-xs">Automatiquement synchronisée</p>
                        </div>

                        <div class="space-y-2">
                            <label for="heureArrivee" class="block text-sm font-medium text-gray-700">
                                Heure d'arrivée
                            </label>
                            <div class="relative">
                                <div class="absolute inset-y-0 left-0 pl-4 flex items-center pointer-events-none">
                                    <svg class="w-5 h-5 text-purple-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"/>
                                    </svg>
                                </div>
                                <input 
                                    type="time" 
                                    id="heureArrivee" 
                                    name="heureArrivee" 
                                    required
                                    class="w-full pl-12 pr-4 py-4 glass-input rounded-2xl text-gray-800 focus:outline-none transition-all duration-300"
                                >
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Step 3: Vehicle & Places -->
            <div class="glass-card rounded-3xl p-6 animate-slide-in-left form-step" data-step="3">
                <div class="flex items-center mb-6">
                    <div class="step-indicator w-8 h-8 rounded-full flex items-center justify-center mr-3 text-white font-bold text-sm">3</div>
                    <h2 class="text-gray-800 font-bold text-lg">Véhicule & Places</h2>
                </div>

                <div class="space-y-4">
                    <!-- Voiture -->
                    <div class="space-y-2">
                        <label for="voitureId" class="block text-sm font-medium text-gray-700">
                            Votre véhicule
                        </label>
                        <div class="relative">
                                                            <div class="absolute inset-y-0 left-0 pl-4 flex items-center pointer-events-none">
                                    <svg class="w-5 h-5 text-yellow-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 15l-6-6-6 6"/>
                                    </svg>
                                </div>
                            <select 
                                id="voitureId" 
                                name="voitureId" 
                                required
                                {% if voitures is empty %}disabled{% endif %}
                                class="w-full pl-12 pr-10 py-4 glass-input rounded-2xl text-gray-800 focus:outline-none transition-all duration-300 appearance-none cursor-pointer"
                            >
                                <option value="" class="bg-white text-gray-600">Sélectionnez votre voiture</option>
                                {% for voiture in voitures %}
                                    <option value="{{ voiture.id }}" data-places="{{ voiture.nombrePlaces }}" class="bg-white text-gray-800">
                                        {{ voiture.marque }} {{ voiture.modele }} ({{ voiture.couleur }}) - {{ voiture.nombrePlaces }} places
                                    </option>
                                {% endfor %}
                            </select>
                            <div class="absolute inset-y-0 right-0 pr-4 flex items-center pointer-events-none">
                                <svg class="w-5 h-5 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"/>
                                </svg>
                            </div>
                        </div>
                    </div>

                    <!-- Places & Coût -->
                    <div class="grid grid-cols-2 gap-4">
                        <div class="space-y-2">
                            <label for="placesRestantes" class="block text-sm font-medium text-gray-700">
                                Places disponibles
                            </label>
                            <div class="relative">
                                <div class="absolute inset-y-0 left-0 pl-4 flex items-center pointer-events-none">
                                    <svg class="w-5 h-5 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 20h5v-2a3 3 0 00-5.356-1.857M17 20H7m10 0v-2c0-.656-.126-1.283-.356-1.857M7 20H2v-2a3 3 0 015.356-1.857M7 20v-2c0-.656.126-1.283.356-1.857m0 0a5.002 5.002 0 019.288 0M15 7a3 3 0 11-6 0 3 3 0 016 0zm6 3a2 2 0 11-4 0 2 2 0 014 0zM7 10a2 2 0 11-4 0 2 2 0 014 0z"/>
                                    </svg>
                                </div>
                                <input 
                                    type="number" 
                                    id="placesRestantes" 
                                    readonly
                                    class="w-full pl-12 pr-4 py-4 glass-input rounded-2xl text-gray-800 focus:outline-none transition-all duration-300 cursor-not-allowed opacity-70"
                                >
                            </div>
                            <p class="text-gray-500 text-xs">Calculé automatiquement à partir du véhicule et des enfants sélectionnés</p>
                            <input type="hidden" id="nombrePlaces" name="nombrePlaces" value="">
                        </div>

                        <div class="space-y-2">
                            <label for="pointsCout" class="block text-sm font-medium text-gray-700">
                                Coût en points
                            </label>
                            <div class="relative">
                                <div class="absolute inset-y-0 left-0 pl-4 flex items-center pointer-events-none">
                                    <svg class="w-5 h-5 text-yellow-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8c-1.657 0-3 .895-3 2s1.343 2 3 2 3 .895 3 2-1.343 2-3 2m0-8c1.11 0 2.08.402 2.599 1M12 8V7m0 1v8m0 0v1m0-1c-1.11 0-2.08-.402-2.599-1"/>
                                    </svg>
                                </div>
                                <input 
                                    type="number" 
                                    id="pointsCout" 
                                    name="pointsCout" 
                                    min="0" 
                                    max="20" 
                                    value="5"
                                    class="w-full pl-12 pr-4 py-4 glass-input rounded-2xl text-gray-800 focus:outline-none transition-all duration-300"
                                >
                            </div>
                            <p class="text-gray-500 text-xs">Coût pour les passagers</p>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Step 4: Children -->
            {% if enfants is not empty %}
                <div class="glass-card rounded-3xl p-6 animate-slide-in-right form-step" data-step="4">
                    <div class="flex items-center mb-6">
                        <div class="step-indicator w-8 h-8 rounded-full flex items-center justify-center mr-3 text-white font-bold text-sm">4</div>
                        <h2 class="text-gray-800 font-bold text-lg">Mes enfants</h2>
                    </div>

                    <div class="space-y-3">
                        <p class="text-gray-600 text-sm">Sélectionnez les enfants qui seront dans votre voiture :</p>
                        
                        <div class="space-y-3 max-h-60 overflow-y-auto">
                            {% for enfant in enfants %}
                                <label class="flex items-center space-x-3 p-3 glass-input rounded-xl cursor-pointer hover:bg-gray-100 transition-all duration-300 group">
                                    <input 
                                        type="checkbox" 
                                        name="enfants[]" 
                                        value="{{ enfant.id }}" 
                                        class="enfant-checkbox w-5 h-5 text-green-500 bg-white/10 border-white/20 rounded focus:ring-green-500 focus:ring-2"
                                    >
                                    <div class="flex-1">
                                                                            <div class="text-gray-800 font-medium text-sm">{{ enfant.prenom }} {{ enfant.nom }}</div>
                                    <div class="text-gray-500 text-xs">{{ enfant.dateNaissance|date('d/m/Y') }} ({{ enfant.age }} ans)</div>
                                    </div>
                                    <div class="w-8 h-8 bg-purple-500/20 rounded-full flex items-center justify-center group-hover:bg-purple-500/30 transition-colors">
                                        <span class="text-purple-600 font-bold text-sm">{{ enfant.prenom|slice(0, 1) }}</span>
                                    </div>
                                </label>
                            {% endfor %}
                        </div>
                    </div>
                </div>
            {% endif %}

            <!-- Step 5: Description -->
            <div class="glass-card rounded-3xl p-6 animate-slide-in-left form-step" data-step="5">
                <div class="flex items-center mb-6">
                    <div class="step-indicator w-8 h-8 rounded-full flex items-center justify-center mr-3 text-white font-bold text-sm">5</div>
                    <h2 class="text-gray-800 font-bold text-lg">Description</h2>
                </div>

                <div class="space-y-2">
                    <label for="description" class="block text-sm font-medium text-gray-700">
                        Informations complémentaires (optionnel)
                    </label>
                    <div class="relative">
                        <div class="absolute top-4 left-4 pointer-events-none">
                            <svg class="w-5 h-5 text-gray-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 8h10M7 12h4m1 8l-4-4H5a2 2 0 01-2-2V6a2 2 0 012-2h14a2 2 0 012 2v8a2 2 0 01-2 2h-3l-4 4z"/>
                            </svg>
                        </div>
                        <textarea 
                            id="description" 
                            name="description" 
                            rows="4"
                            class="w-full pl-12 pr-4 py-4 glass-input rounded-2xl text-gray-800 placeholder-gray-500 focus:outline-none transition-all duration-300 resize-none"
                            placeholder="Conditions spéciales, préférences, informations utiles..."
                        ></textarea>
                    </div>
                </div>
            </div>

            <!-- Action Buttons -->
            <div class="flex space-x-4 pt-6">
                <a 
                    href="{{ path('app_home') }}" 
                    class="flex-1 py-4 px-6 btn-cancel font-medium rounded-2xl transition-all duration-300 text-center"
                >
                    <svg class="w-4 h-4 inline mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"/>
                    </svg>
                    Annuler
                </a>
                
                <button 
                    type="submit" 
                    class="flex-1 py-4 px-6 btn-create text-white font-semibold rounded-2xl transition-all duration-300 transform hover:scale-[1.02] focus:outline-none focus:ring-2 focus:ring-white/20 shadow-lg hover:shadow-xl relative overflow-hidden group"
                    {% if enfants is empty or voitures is empty or ecoles is empty %}disabled{% endif %}
                    id="submitBtn"
                >
                    <span class="relative flex items-center justify-center">
                        <svg class="w-5 h-5 mr-2 group-hover:rotate-12 transition-transform duration-300" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4"/>
                        </svg>
                        <span id="submitText">Créer le trajet</span>
                    </span>
                </button>
            </div>

        </form>
    </main>



    <!-- JavaScript -->
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Set minimum date to today
            const today = new Date().toISOString().split('T')[0];
            document.getElementById('dateDepart').min = today;
            
            // DOM Elements
            const voitureSelect = document.getElementById('voitureId');
            const nombrePlacesInput = document.getElementById('nombrePlaces');
            const enfantCheckboxes = document.querySelectorAll('.enfant-checkbox');
            const dateDepartInput = document.getElementById('dateDepart');
            const dateArriveeInput = document.getElementById('dateArrivee');
            const heureDepartInput = document.getElementById('heureDepart');
            const heureArriveeInput = document.getElementById('heureArrivee');
            const pointDepartInput = document.getElementById('pointDepart');
            const suggestionsDiv = document.getElementById('suggestions');
            const progressBar = document.getElementById('progressBar');
            const submitBtn = document.getElementById('submitBtn');
            const submitText = document.getElementById('submitText');
            
            let timeoutId = null;
            let formValid = false;

            // Progress tracking
            function updateProgress() {
                const steps = document.querySelectorAll('.form-step');
                const stepIndicators = document.querySelectorAll('.step-indicator');
                let completedSteps = 0;

                // Check step completion
                if (pointDepartInput.value && document.getElementById('ecoleArrivee').value) {
                    stepIndicators[0].classList.add('active');
                    completedSteps++;
                }

                if (dateDepartInput.value && heureDepartInput.value && heureArriveeInput.value) {
                    stepIndicators[1].classList.add('active');
                    completedSteps++;
                }

                if (voitureSelect.value) {
                    stepIndicators[2].classList.add('active');
                    completedSteps++;
                }

                // Step 4 is optional (children)
                stepIndicators[3].classList.add('active');
                completedSteps++;

                // Step 5 is optional (description)
                stepIndicators[4].classList.add('active');
                completedSteps++;

                // Update progress bar
                const progress = (completedSteps / 5) * 100;
                progressBar.style.width = progress + '%';

                // Update form validity
                formValid = completedSteps >= 3; // At least first 3 steps
                
                if (formValid) {
                    submitBtn.classList.remove('btn-create:disabled');
                    submitBtn.disabled = false;
                } else {
                    submitBtn.disabled = {% if enfants is empty or voitures is empty or ecoles is empty %}true{% else %}!formValid{% endif %};
                }
            }

            // Calculate available places
            function calculerPlacesDisponibles() {
                const voitureOption = voitureSelect.options[voitureSelect.selectedIndex];
                const hiddenTotalInput = document.getElementById('nombrePlaces');
                const placesRestantesInput = document.getElementById('placesRestantes');
                if (voitureOption && voitureOption.value) {
                    const placesVoiture = parseInt(voitureOption.dataset.places) || 0;
                    const enfantsSelectionnes = document.querySelectorAll('.enfant-checkbox:checked').length;
                    const restantes = Math.max(0, placesVoiture - enfantsSelectionnes);
                    // Envoyer au backend le total du véhicule
                    hiddenTotalInput.value = placesVoiture;
                    // Afficher à l'utilisateur les places restantes
                    placesRestantesInput.value = restantes;
                    
                    // Feedback visuel
                    placesRestantesInput.classList.remove('success', 'error');
                    if (restantes === 0) {
                        placesRestantesInput.classList.add('error');
                    } else {
                        placesRestantesInput.classList.add('success');
                    }
                } else {
                    hiddenTotalInput.value = '';
                    placesRestantesInput.value = '';
                    placesRestantesInput.classList.remove('success', 'error');
                }
                updateProgress();
            }
            
            // Sync arrival date with departure date
            function synchroniserDateArrivee() {
                dateArriveeInput.value = dateDepartInput.value;
                updateProgress();
            }
            
            // Validate times
            function validerHeures() {
                const heureDepart = heureDepartInput.value;
                const heureArrivee = heureArriveeInput.value;
                const dateDepart = dateDepartInput.value;
                
                heureDepartInput.classList.remove('error');
                heureArriveeInput.classList.remove('error');
                dateDepartInput.classList.remove('error');
                
                // Validation que le trajet n'est pas dans le passé
                if (dateDepart && heureDepart) {
                    const departDateTime = new Date(dateDepart + ' ' + heureDepart);
                    const now = new Date();
                    
                    if (departDateTime <= now) {
                        dateDepartInput.setCustomValidity('Impossible de créer un trajet avec une date/heure de départ dans le passé');
                        dateDepartInput.classList.add('error');
                        dateDepartInput.classList.add('animate-wiggle');
                        setTimeout(() => dateDepartInput.classList.remove('animate-wiggle'), 500);
                        return;
                    } else {
                        dateDepartInput.setCustomValidity('');
                        dateDepartInput.classList.add('success');
                    }
                }
                
                if (heureDepart && heureArrivee && heureDepart >= heureArrivee) {
                    heureArriveeInput.setCustomValidity('L\'heure d\'arrivée doit être après l\'heure de départ');
                    heureArriveeInput.classList.add('error');
                    heureArriveeInput.classList.add('animate-wiggle');
                    setTimeout(() => heureArriveeInput.classList.remove('animate-wiggle'), 500);
                } else {
                    heureArriveeInput.setCustomValidity('');
                    if (heureDepart && heureArrivee) {
                        heureDepartInput.classList.add('success');
                        heureArriveeInput.classList.add('success');
                    }
                }
                updateProgress();
            }
            
            // Duration calculation variables
            let calculatedDurationMinutes = 0;
            let calculatedDistance = 0;

            // Calculate route duration using OSRM
            async function calculerDureeTrajet() {
                const pointDepart = pointDepartInput.value.trim();
                const ecoleSelect = document.getElementById('ecoleArrivee');
                const ecoleOption = ecoleSelect.options[ecoleSelect.selectedIndex];
                
                if (!pointDepart || !ecoleOption || !ecoleOption.value) {
                    document.getElementById('dureeContainer').style.display = 'none';
                    return;
                }

                const pointArrivee = ecoleOption.text.split(' - ')[1] || ecoleOption.text;
                
                try {
                    document.getElementById('dureeContainer').style.display = 'block';
                    document.getElementById('dureeText').textContent = 'Calcul en cours...';
                    document.getElementById('appliquerDuree').style.display = 'none';
                    
                    // Geocode both addresses
                    const [departCoords, arriveeCoords] = await Promise.all([
                        geocodeAddress(pointDepart),
                        geocodeAddress(pointArrivee)
                    ]);
                    
                    if (!departCoords || !arriveeCoords) {
                        throw new Error('Impossible de géocoder les adresses');
                    }
                    
                    // Calculate route using OSRM
                    const osrmUrl = `https://router.project-osrm.org/route/v1/driving/${departCoords[1]},${departCoords[0]};${arriveeCoords[1]},${arriveeCoords[0]}?overview=false&alternatives=false&steps=false`;
                    
                    const response = await fetch(osrmUrl);
                    const data = await response.json();
                    
                    if (data.code === 'Ok' && data.routes && data.routes.length > 0) {
                        const route = data.routes[0];
                        calculatedDurationMinutes = Math.round(route.duration / 60);
                        calculatedDistance = Math.round(route.distance / 1000 * 10) / 10; // km with 1 decimal
                        
                        const hours = Math.floor(calculatedDurationMinutes / 60);
                        const minutes = calculatedDurationMinutes % 60;
                        
                        let durationText = '';
                        if (hours > 0) {
                            durationText = `${hours}h ${minutes}min`;
                        } else {
                            durationText = `${minutes}min`;
                        }
                        
                        document.getElementById('dureeText').innerHTML = `
                            <div class="flex items-center space-x-4">
                                <span><strong>${durationText}</strong> (${calculatedDistance} km)</span>
                            </div>
                        `;
                        document.getElementById('appliquerDuree').style.display = 'block';
                        
                        // Update hidden fields
                        document.getElementById('dureeMinutes').value = calculatedDurationMinutes;
                        document.getElementById('distanceKm').value = calculatedDistance;
                    } else {
                        throw new Error('Aucun itinéraire trouvé');
                    }
                } catch (error) {
                    console.error('Erreur calcul durée:', error);
                    document.getElementById('dureeText').innerHTML = `
                        <span class="text-red-600">Impossible de calculer la durée</span>
                    `;
                    document.getElementById('appliquerDuree').style.display = 'none';
                }
            }

            // Geocode address using Nominatim
            async function geocodeAddress(address) {
                try {
                    const url = `https://nominatim.openstreetmap.org/search?format=json&q=${encodeURIComponent(address)}&limit=1`;
                    const response = await fetch(url);
                    const data = await response.json();
                    
                    if (data.length > 0) {
                        return [parseFloat(data[0].lat), parseFloat(data[0].lon)];
                    }
                } catch (error) {
                    console.error('Geocoding error:', error);
                }
                return null;
            }

            // Apply calculated duration to arrival time
            function appliquerDureeCalculee() {
                const heureDepartInput = document.getElementById('heureDepart');
                const heureArriveeInput = document.getElementById('heureArrivee');
                
                if (!heureDepartInput.value || calculatedDurationMinutes === 0) {
                    return;
                }
                
                const [hours, minutes] = heureDepartInput.value.split(':').map(Number);
                const departTime = new Date();
                departTime.setHours(hours, minutes, 0, 0);
                
                const arriveeTime = new Date(departTime.getTime() + calculatedDurationMinutes * 60000);
                
                const arriveeHours = arriveeTime.getHours().toString().padStart(2, '0');
                const arriveeMinutes = arriveeTime.getMinutes().toString().padStart(2, '0');
                
                heureArriveeInput.value = `${arriveeHours}:${arriveeMinutes}`;
                
                // Add visual feedback
                heureArriveeInput.classList.add('success');
                setTimeout(() => heureArriveeInput.classList.remove('success'), 2000);
            }

            // Address search
            async function rechercherAdresses(query) {
                if (query.length < 3) {
                    suggestionsDiv.innerHTML = '';
                    suggestionsDiv.classList.add('hidden');
                    return;
                }
                
                try {
                    const response = await fetch(`https://api-adresse.data.gouv.fr/search/?q=${encodeURIComponent(query)}&limit=5`);
                    const data = await response.json();
                    
                    if (data.features && data.features.length > 0) {
                        suggestionsDiv.innerHTML = '';
                        data.features.forEach((feature, index) => {
                            const div = document.createElement('div');
                            div.className = 'p-4 hover:bg-gray-100 cursor-pointer border-b border-gray-200 last:border-b-0 transition-colors duration-200 flex items-center space-x-3';
                            div.innerHTML = `
                                <svg class="w-4 h-4 text-blue-600 flex-shrink-0" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z"/>
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 11a3 3 0 11-6 0 3 3 0 016 0z"/>
                                </svg>
                                <span class="text-gray-800 text-sm">${feature.properties.label}</span>
                            `;
                            div.style.animationDelay = `${index * 0.05}s`;
                            div.classList.add('animate-slide-up');
                            div.addEventListener('click', () => {
                                pointDepartInput.value = feature.properties.label;
                                pointDepartInput.classList.add('success');
                                suggestionsDiv.classList.add('hidden');
                                updateProgress();
                            });
                            suggestionsDiv.appendChild(div);
                        });
                        suggestionsDiv.classList.remove('hidden');
                    } else {
                        suggestionsDiv.innerHTML = '<div class="p-4 text-gray-500 text-sm text-center">Aucune adresse trouvée</div>';
                        suggestionsDiv.classList.remove('hidden');
                    }
                } catch (error) {
                    console.error('Erreur lors de la recherche d\'adresses:', error);
                }
            }

            // Form submission
            document.querySelector('form').addEventListener('submit', function(e) {
                submitBtn.disabled = true;
                submitText.textContent = 'Création en cours...';
                submitBtn.classList.add('animate-pulse');
            });
            
            // Event listeners
            voitureSelect.addEventListener('change', calculerPlacesDisponibles);
            enfantCheckboxes.forEach(checkbox => {
                checkbox.addEventListener('change', calculerPlacesDisponibles);
            });
            dateDepartInput.addEventListener('change', () => {
                synchroniserDateArrivee();
                validerHeures();
            });
            heureDepartInput.addEventListener('change', validerHeures);
            heureArriveeInput.addEventListener('change', validerHeures);
            
            // Address autocomplete with duration calculation
            pointDepartInput.addEventListener('input', (e) => {
                clearTimeout(timeoutId);
                timeoutId = setTimeout(() => {
                    rechercherAdresses(e.target.value);
                    calculerDureeTrajet();
                }, 300);
                updateProgress();
            });

            // School selection with duration calculation
            document.getElementById('ecoleArrivee').addEventListener('change', () => {
                calculerDureeTrajet();
                updateProgress();
            });

            // Apply duration button
            document.getElementById('appliquerDuree').addEventListener('click', appliquerDureeCalculee);
            
            // All inputs progress update
            document.querySelectorAll('input, select, textarea').forEach(input => {
                input.addEventListener('change', updateProgress);
                input.addEventListener('input', updateProgress);
            });
            
            // Hide suggestions when clicking outside
            document.addEventListener('click', (e) => {
                if (!pointDepartInput.contains(e.target) && !suggestionsDiv.contains(e.target)) {
                    suggestionsDiv.classList.add('hidden');
                }
            });
            
            // Parallax effect for floating orbs
            document.addEventListener('mousemove', (e) => {
                const x = e.clientX / window.innerWidth;
                const y = e.clientY / window.innerHeight;
                
                const orbs = document.querySelector('.floating-orbs');
                if (orbs) {
                    orbs.style.transform = `translate(${x * 8}px, ${y * 8}px)`;
                }
            });

            // Staggered animations on load
            setTimeout(() => {
                const steps = document.querySelectorAll('.form-step');
                steps.forEach((step, index) => {
                    setTimeout(() => {
                        step.style.opacity = '1';
                        step.style.transform = 'translateX(0)';
                    }, index * 200);
                });
            }, 300);
            
            // Initial calculations
            calculerPlacesDisponibles();
            updateProgress();
        });
    </script>

    {% include 'partials/_bottom_navigation.html.twig' %}
</body>
</html>